services:
  psql:
    image: "postgres:17"
    ports:
      - "${FORWARD_DB_PORT:-5432}:5432"
    environment:
      PGPASSWORD: "${DB_PASSWORD:-secret}"
      POSTGRES_DB: "${DB_DATABASE}"
      POSTGRES_USER: "${DB_USERNAME}"
      POSTGRES_PASSWORD: "${DB_PASSWORD:-secret}"
    volumes:
      - "pgdata:/var/lib/postgresql/data"
      - "./docker/config/pgsql/create-testing-database.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql"
    healthcheck:
      test:
        - CMD
        - pg_isready
        - "-q"
        - "-d"
        - "${DB_DATABASE}"
        - "-U"
        - "${DB_USERNAME}"
      retries: 3
      timeout: 5s
    labels:
      - "traefik.enable=false"
    networks:
      - backend

  elasticsearch:
    image: elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
    volumes:
      - esdata:/usr/share/elasticsearch/data
    labels:
      - "traefik.enable=false"
    networks:
      - backend

  logstash:
    image: logstash:7.17.0
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    labels:
      - "traefik.enable=false"
    networks:
      - backend

  kibana:
    image: kibana:7.17.0
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.${DOMAIN}`)"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"
    ports:
      - "5601:5601"
    networks:
      - backend
      - traefik-net

  weaviate:
    image: semitechnologies/weaviate:1.19.0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
    volumes:
      - weaviate_data:/var/lib/weaviate
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.weaviate.rule=Host(`weaviate.${DOMAIN}`)"
      - "traefik.http.services.weaviate.loadbalancer.server.port=8080"
    ports:
      - "8080:8080"
    networks:
      - backend
      - traefik-net

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`minio.${DOMAIN}`)"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-console.rule=Host(`minio-console.${DOMAIN}`)"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - backend
      - traefik-net

  webapp:
    build:
      context: "./docker/config/php/8.4"
      dockerfile: Dockerfile
      args:
        WWWGROUP: "${WWWGROUP}"
    image: "php-8.4/app"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file: .env
    environment:
      WWWUSER: "${WWWUSER}"
    volumes:
      - .env:/var/www/html/.env
      - ./webapp:/var/www/html
      - ./docker/config/php/nginx.conf:/etc/nginx/conf.d/default.conf
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.laravel.rule=Host(`laravel.${DOMAIN}`)"
      - "traefik.http.services.laravel.loadbalancer.server.port=80"
    ports:
      - "8000:80"
    depends_on:
      - psql
    networks:
      - backend
      - traefik-net

  python:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.python
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./python:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi.rule=Host(`fastapi.${DOMAIN}`)"
      - "traefik.http.services.fastapi.loadbalancer.server.port=8000"
    ports:
      - "8001:8000"
    networks:
      - backend
      - traefik-net

  redis:
    image: redis:alpine
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    labels:
      - "traefik.enable=false"
    networks:
      - backend

  portainer:
    image: portainer/portainer-ce
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    ports:
      - "9000:9000"
    networks:
      - traefik-net

  n8n:
    image: n8nio/n8n
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.${DOMAIN}`)"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    ports:
      - "5678:5678"
    networks:
      - traefik-net

  # ollama:
  #   image: ollama/ollama
  #   volumes:
  #     - ollama_data:/root/.ollama
  #   labels:
  #     - "traefik.enable=false"
  #   networks:
  #     - backend

  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - OLLAMA_API_BASE_URL=http://ollama:11434
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openwebui.rule=Host(`openwebui.${DOMAIN}`)"
      - "traefik.http.services.openwebui.loadbalancer.server.port=8080"
    ports:
      - "3000:8080"
    # depends_on:
    #   - ollama
    networks:
      - traefik-net
      - backend

volumes:
  pgdata:
  esdata:
  weaviate_data:
  minio_data:
  portainer_data:
  ollama_data:

networks:
  traefik-net:
    driver: bridge
  backend:
    driver: bridge
